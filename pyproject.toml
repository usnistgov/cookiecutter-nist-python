[project]
name = "cookiecutter-nist-python"
version = "0.4.0.dev"
description = "Cookiecutter template for NIST python packages"
keywords = [
    "cookiecutter-nist-python",
]
license = "NIST-PD"
license-files = [ "LICENSE" ]
authors = [
    { name = "William P. Krekelberg", email = "wpk@nist.gov" },
]
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
]
dynamic = [
    "readme",
]
dependencies = [
]
urls.Documentation = "https://pages.nist.gov/cookiecutter-nist-python/"
urls.Homepage = "https://github.com/usnistgov/cookiecutter-nist-python"

[dependency-groups]
dev = [
    { include-group = "dev-extras" },
    { include-group = "mypy" },
    # { include-group = "nbval" },
    { include-group = "test" },
    { include-group = "typecheck" },
]
test = [
    { include-group = "test-extras" },
]
docs = [
    "autodocsumm",
    "myst-parser",
    "pyenchant",
    "sphinx>=5.3.0",
    "sphinx-book-theme",
    "sphinx-copybutton",
    "sphinxcontrib-spelling",
]
cog = [ "cogapp" ]
dev-extras = [
    "nox>=2025.5.1",
]
docs-live = [
    "sphinx-autobuild",
    { include-group = "docs" },
]
mypy = [ "mypy>=1.15.0" ]
nbval = [ "nbval" ]
test-extras = [
    "cookiecutter",
    "copier",
    # "copier-templates-extensions==0.3.0",
    "copier-templates-extensions>=0.3.1",
    "pytest",
    "pytest-cov",
    "pytest-sugar",
    "pytest-xdist",
]
test-notebook = [
    { include-group = "nbval" },
    { include-group = "test-extras" },
]
typecheck = [
    "pylint",
    "pytest",
]

[tool.repo-review]
ignore = [
    "GH",    # enable for actions
    "PC140", # do this externally
    "PC170", # pygrep
    "PC901", # ci message
    "RTD",
    "PP002",
    "PP003",
]

[tool.pyproject-fmt]
# max_supported_python = "3.13"

# * Testing --------------------------------------------------------------------

[tool.pytest.ini_options]
addopts = [
    "-ra",
    "--strict-config",
    "--strict-markers",
    "--doctest-modules",
    "--doctest-glob=*.md",
    "--cov-config=pyproject.toml",
    "-s",
]
testpaths = [
    "tests",
]
markers = [
    "default: default template",
    "furo: furo theme",
    "book: sphinx book theme",
    "nocli: no command-line interface",
    "click: Click cli",
    "typer: Typer template",
    "test: run tests",
    "lint: run linting",
    "docs: make docs",
    "typecheck: run type checkers",
    "mypystrict: run mypy --strict",
    "create: simple test on path creation",
    "longname: a project with a long name",
    "disable: test that has been disabled by default",
    "version: update-version-scm (disabled by default)",
    "cookie: cookiecutter",
    "copier: run copier tests",
    "notebook: run typing/test on notebook",
]
minversion = "8"
log_cli_level = "INFO"
xfail_strict = true
filterwarnings = [
    "error",
    "ignore: Dirty template:copier.errors.DirtyLocalWarning",
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true
exclude_also = [
    "if TYPE_CHECKING:",
    "@overload",
]
omit = [
    "*/vendored/*",
]
include = [
    "src/*",
]

# * typecheck ---------------------------------------------------------------------

[tool.mypy]
files = [
    "tests",
]
warn_unused_ignores = true
warn_return_any = true
warn_unused_configs = true
warn_unreachable = true
exclude = [
    ".eggs",
    ".tox",
    ".nox",
    ".venv",
    ".numba_cache",
    "docs",
]
check_untyped_defs = true
strict = false
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [ "cookiecutter.*" ]

# [[tool.mypy.overrides]]
# ignore_errors = true
# module = [  ]

[tool.pyright]
include = [
    "tests",
]
exclude = [
    "**/__pycache__",
    ".tox/**",
    ".nox/**",
    ".venv/**",
    "**/.mypy_cache",
    "**/.numba_cache",
    "tools/copier_extensions.py",
]
pythonVersion = "3.11"
# strict = ["noxfile.py", "tools/*.py"]
typeCheckingMode = "strict"
# typeCheckingMode = "basic"
# # enable subset of "strict"
# reportDuplicateImport = true
# reportInvalidStubStatement = true
# reportOverlappingOverload = true
# reportPropertyTypeMismatch = true
# reportUntypedClassDecorator = true
# reportUntypedFunctionDecorator = true
# reportUntypedNamedTuple = true
# reportUnusedImport = true
# # disable subset of "basic"
# reportGeneralTypeIssues = false
# reportMissingModuleSource = false
# reportOptionalCall = false
# reportOptionalIterable = false
# reportOptionalMemberAccess = false
# reportOptionalOperand = false
# reportOptionalSubscript = false
# reportPrivateImportUsage = false
# reportUnboundVariable = false

[tool.pytype]
inputs = [
    "src",
    "tests",
]

# * Dependency creation --------------------------------------------------------

[tool.pyproject2conda]
user_config = "config/userconfig.toml"
template_python = "requirements/py{py}-{env}"
template = "requirements/{env}"
python = "default"
channels = "conda-forge"
style = "yaml"
deps = "pip"

[tool.pyproject2conda.dependencies]
pytest-accept = { pip = true }
copier-templates-extensions = { pip = true }

[tool.pyproject2conda.envs.dev]
groups = "dev"

[tool.pyproject2conda.envs.test]
groups = "test"
python = "all"

[tool.pyproject2conda.envs.uvx-tools]
reqs = [
    # these used solely for specking tools to be used with uvx --constraints=...
    "conda-lock>=2.5.5",
    "cruft",
    "grayskull>=2.5.3",
    "nbqa>=1.8.4",
    "pre-commit",
    "pre-commit-uv",
    "pyrefly",
    "pyright>=1.1.396",
    "scriv",
    "twine>=5.0.0",
    "ty",
]
groups = "mypy"
skip_package = true
style = "requirements"

# * uv -------------------------------------------------------------------------

[tool.uv]
managed = true
default-groups = [ "dev" ]
fork-strategy = "requires-python"
required-version = ">=0.7.2"

[tool.uv.pip]
annotation-style = "line"

# * Other tools ----------------------------------------------------------------

[tool.scriv]
format = "md"
md_header_level = "2"
new_fragment_template = "file: changelog.d/templates/new_fragment.md.j2"

[tool.commitizen]
use_shortcuts = true

[tool.cruft]
