[project]
name = "cookiecutter-nist-python"
version = "0.1.0"
description = "Cookiecutter template for NIST python packages"
keywords = [
    "cookiecutter-nist-python",
]
license = { text = "NIST-PD" }
authors = [{ name = "William P. Krekelberg", email = "wpk@nist.gov" }]
requires-python = ">=3.8,<=3.12"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "License :: Public Domain",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
]
dynamic = [
    "readme",
]
dependencies = [
]
[project.optional-dependencies]
dev = [
    # "cookiecutter-nist-python[nbval]",
    "cookiecutter-nist-python[test]",
    "cookiecutter-nist-python[typing-extras]",
    "cookiecutter-nist-python[dev-extras]",
]
dev-complete = [
    "cookiecutter-nist-python[dev]",
    "cookiecutter-nist-python[tools]",
]
dev-extras = [
    "ipykernel",
    "ipython",
    "nox",
    "pytest-accept",
]
docs = [
    "autodocsumm",
    "ghp-import",
    "ipython",
    "myst-nb",
    "pyenchant",
    "sphinx >= 5.3.0",
    "sphinx-autobuild",
    "sphinx-book-theme",
    "sphinx-copybutton",
    "sphinxcontrib-spelling",
]
nbval = [
    "nbval",
]
test = [
    "cookiecutter",
    "copier",
    "copier-templates-extensions",
    "pytest",
    "pytest-cov",
    "pytest-sugar",
    "pytest-xdist",
]
tools = [
    "pip-tools",
    "pre-commit",
    "pyright",
    "scriv",
]
typing = [
    "cookiecutter-nist-python[typing-extras]",
    "pytest",
]
typing-extras = [
    "mypy >= 1.4.1",
    "pytype; python_version < '3.11'",
]
[project.urls]
Documentation = "https://pages.nist.gov/cookiecutter-nist-python/"
Homepage = "https://github.com/usnistgov/cookiecutter-nist-python"

[tool.ruff]
fix = true
line-length = 88
target-version = "py38"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "tests/",
]

[tool.ruff.lint]
select = [
    "F",      ## pyflakes
    "E", "W", ## pycodestyle
    "I",      ## isort
    "UP",     ## pyupgrade
    "D",      ## pydocstyle
    "YTT",    ## flake8-2020
    # "B",    ## flake8-bugbear
    "Q",      ## flake8-quotes
    # "PLE",  ## pylint
    # "PLR"   ## pylint
    # "PLW",  ## pylint
    "PIE",    ## misc lints
    "TID",    ## tidy imports
    # "ISC",  ## implicit string concatenation
    "TCH",    ## type-checking imports
]
# Allow autofix for all enabled rules (when `--fix`) is provided.
# fixable = ["A", "B", "C", "D", "E", "F", "..."]
unfixable = []
# Exclude a variety of commonly ignored directories.
ignore = [
    # "E203", ## whitespace before ':' - doesn't work well with black
    "E402",   ## module level import not at top of file
    "E501",   ## line too long - let black worry about that
    "E731",   ## do not assign a lambda expression, use a def
    # "W503", ## line break before binary operator
    "D202",   ## blank line after docstring
    "D105",   ## Missing magic method docstring
    "D205",   ## blank line after summary
    # this leads to errors with placing titles in module
    "D400",   ## First line should end with a period
    "D401",   ## First line of docstring should be in imperative mood: "{first_line}"
    "D415",   ## First line should end with a period, question mark, or exclamation point
    "D102",   ## Missing docstring in public method
    "D103",   ## Missing docstring in public function
    # these are useful, but too many errors with docfiller
    "D417",   ## Missing argument description in the docstring for {definition}: {name}
    "D107",   ## Missing docstring in __init__
    "D203",   ## 1 blank line required before class docstring
    "D212",   ## Multi-line docstring summary should start at the first line
    "TID252", ## Allow relative imports
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
# per-file-ignores = {  }

[tool.ruff.lint.isort]
known-first-party = ["open_notebook"]

[tool.ruff.format]
docstring-code-format = true

[tool.nbqa.addopts]
ruff = ["--fix", "--extend-ignore=D100,B018"]

# * Testing --------------------------------------------------------------------

[tool.pytest.ini_options]
addopts = "--doctest-modules --doctest-glob='*.md' -s"
testpaths = ["tests", "README.md"]
markers = [
    "default: default template",
    "furo: furo theme",
    "book: sphinx book theme",
    "nocli: no command-line interface",
    "click: Click cli",
    "typer: Typer template",
    "test: run tests",
    "lint: run linting",
    "docs: make docs",
    "typing: run typing checks",
    "mypystrict: run mypy --strict",
    "create: simple test on path creation",
    "longname: a project with a long name",
    "disable: test that has been disabled by default",
    "version: update-version-scm (disabled by default)",
    "cookie: cookiecutter",
    "copier: run copier tests",
    "notebook: run typing/test on notebook",
]

[tool.coverage.report]
exclude_also = ["if TYPE_CHECKING:", "@overload"]
omit = ["*/vendored/*"]
include = ["src/*"]

# * Typing ---------------------------------------------------------------------

[tool.mypy]
files = ["tests"]
show_error_codes = true
warn_unused_ignores = true
warn_return_any = true
warn_unused_configs = true
exclude = [".eggs", ".tox", "doc", "docs", ".nox"]
check_untyped_defs = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["cookiecutter.*"]

[[tool.mypy.overrides]]
ignore_errors = true
module = []

[tool.pyright]
include = ["tests"]
exclude = ["**/__pycache__", ".tox/**", ".nox/**", "**/.mypy_cache"]
pythonVersion = "3.11"
typeCheckingMode = "basic"
# enable subset of "strict"
reportDuplicateImport = true
reportInvalidStubStatement = true
reportOverlappingOverload = true
reportPropertyTypeMismatch = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
reportUntypedNamedTuple = true
reportUnusedImport = true
# disable subset of "basic"
reportGeneralTypeIssues = false
reportMissingModuleSource = false
reportOptionalCall = false
reportOptionalIterable = false
reportOptionalMemberAccess = false
reportOptionalOperand = false
reportOptionalSubscript = false
reportPrivateImportUsage = false
reportUnboundVariable = false

[tool.pytype]
inputs = ["src", "tests"]

# * Dependency creation --------------------------------------------------------

[tool.pyproject2conda]
user_config = "config/userconfig.toml"
template_python = "requirements/py{py}-{env}"
template = "requirements/{env}"
python = ["3.11"]
channels = ["conda-forge"]
style = ["yaml", "requirements"]
default_envs = ["test", "typing", "docs", "dev", "dev-complete"]

[tool.pyproject2conda.dependencies]
pytest-accept = { pip = true }
scriv = { pip = true }
copier-templates-extensions = { pip = true }

[tool.pyproject2conda.envs.test-extras]
extras = ["test"]
base = false

[[tool.pyproject2conda.overrides]]
# Ensure these have pip in yaml file
envs = ["test", "docs", "dev", "dev-complete"]
deps = ["pip"]

[[tool.pyproject2conda.overrides]]
envs = ["test", "typing", "test-extras"]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.pip-tools]
allow-unsafe = true
strip-extras = true

# * Other tools ----------------------------------------------------------------

[tool.scriv]
format = "md"
md_header_level = "2"
new_fragment_template = "file: changelog.d/templates/new_fragment.md.j2"

[tool.commitizen]
use_shortcuts = true

[tool.cruft]
