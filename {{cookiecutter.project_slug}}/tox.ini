[tox]
isolated_build = True
requires = tox-conda
envlist =
        # test
        py3{8, 9, 10}-tests

[base]
package_name = {{ cookiecutter.project_name }}
import_name  = {{ cookiecutter.project_slug }}
build_python = python3.10
conda_env            = {toxinidir}/environment.yaml
conda_env_dev        = {toxinidir}/environment/dev.yaml
conda_env_test       = {toxinidir}/environment/test.yaml
conda_env_docs       = {toxinidir}/environment/docs.yaml
conda_env_dist_pypi  = {toxinidir}/environment/dist-pypi.yaml
conda_env_dist_conda = {toxinidir}/environment/dist-conda.yaml
conda_env_lint       = {toxinidir}/environment/lint.yaml
conda_channels =
    wpk-nist
    conda-forge
conda_deps_test =
allowlist_externals =
    bash
    make
commands_test_check =
    python --version
    python -c 'import {[base]import_name}; print( {[base]import_name}.__version__)'
    bash -ec 'echo $PWD'
    echo {posargs:{toxinidir}}

[testenv]
passenv = SETUPTOOLS_SCM_PRETEND_VERSION
usedevelop =
    tests: True
conda_env =
    tests: {[base]conda_env_test}
allowlist_externals =
    {[base]allowlist_externals}
commands =
    {[base]commands_test_check}
    {posargs:pytest}

[testenv:dev]
description =
    Create development environment.
usedevelop = True
basepython = {[base]build_python}
conda_env = {[base]conda_env_dev}
envdir = {toxworkdir}/dev
commands =
    {posargs:bash -ec 'conda list'}

[testenv:docs]
description =
    Runs make in docs directory.
    For example, 'tox -e docs -- html' -> 'make -C docs html'.
    With 'release' option, you can set the message with 'message=...' in posargs.
usedevelop = True
envdir     = {toxworkdir}/docs
basepython = {[base]build_python}
conda_env  = {[base]conda_env_docs}
changedir  = {toxinidir}/docs
commands =
    make {posargs:html}
    # build: bash -c "echo $PWD"
    # build: make {posargs:html}
    # open: open {toxinidir}/docs/_build/html/index.html
    # release: ghp-import -o -n {posargs:-m 'update docs'} -b nist-pages {toxinidir}/docs/_build/html
    # clean: make allclean
    # spelling: make spelling
    # command: {posargs}
    # live: make livehtml
    # make: make {posargs}

[testenv:dist-pypi]
description  =
             Runs make -f scrips/dist-pypi.mk posargs
             For example, 'tox -e dist-pypi -- build' -> 'make -f scripts/dist-pypi.mk build'
skip_install = True
envdir       = {toxworkdir}/dist-pypi
basepython   = {[base]build_python}
conda_env    = {[base]conda_env_dist_pypi}
changedir    = {toxinidir}
commands     =
             make -f {toxinidir}/scripts/dist-pypi.mk {posargs:build}

[testenv:dist-conda]
description  =
             Runs make -C dist-conda posargs
    recipe: build conda recipe using grayskull (can optionally pass a local sdist)
    build: build conda distribution
    command: run arbitrary command
skip_install = True
envdir       = {toxworkdir}/dist-conda
basepython   = {[base]build_python}
conda_env    = {[base]conda_env_dist_conda}
changedir    = {toxinidir}/dist-conda
commands     =
             make -f {toxinidir}/scripts/dist-conda.mk {posargs} package_name={[base]package_name}

[testenv:test-dist-{pypi, conda}-{local,remote}-py3{8,9,10}]
conda_channels =
    {[base]conda_channels}
description =
    Test install from
    pypi: pypi
    conda: conda
    using either
    local: local
    remote: remote
    versions.
skip_install = True
conda_env    = {toxinidir}/environment/test-extras.yaml
conda_deps =
    conda-remote: {[base]package_name}
    conda-local: {posargs}
deps =
    pypi-remote: {[base]package_name}
    pypi-local: {posargs}

[testenv:test-pip-py3{8,9,10}]
description  =
    Test package against pip installed packages
usedevelop   = True
extras = test
conda_env    = {toxinidir}/environment/test-extras.yaml

[testenv:lint]
description =
    Run mypy on code. (run with tox -e lint -- --no-incremental to rebuild cache).
conda_env = {[base]conda_env_lint}
usedevelop = True
envdir     = {toxworkdir}/lint
basepython = {[base]build_python}
commands =
         make -f {toxinidir}/scripts/lint.mk {posargs:mypy}
