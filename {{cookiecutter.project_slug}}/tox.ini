[tox]
isolated_build = True
requires = tox-conda
envlist =
        # test
        py3{8, 9, 10}-tests


[base]
package_name = {{ cookiecutter.project_name }}
import_name  = {{ cookiecutter.project_slug }}
build_python = python3.10
conda_env            = {toxinidir}/environment.yaml
conda_env_dev        = {toxinidir}/environment/dev.yaml
conda_env_test       = {toxinidir}/environment/test.yaml
conda_env_docs       = {toxinidir}/environment/docs.yaml
conda_env_dist_pypi  = {toxinidir}/environment/dist-pypi.yaml
conda_env_dist_conda = {toxinidir}/environment/dist-conda.yaml
conda_env_lint       = {toxinidir}/environment/lint.yaml
conda_channels =
    wpk-nist
    conda-forge
conda_deps_test =
allowlist_externals =
    bash
    open
    cat
    rm
    echo
    mkdir
    make
commands_test_check =
    python --version
    python -c 'import {[base]import_name}; print( {[base]import_name}.__version__)'
    bash -ec 'echo $PWD'
    echo {posargs:{toxinidir}}


[testenv]
usedevelop =
    tests: True
conda_env =
    tests: {[base]conda_env_test}
allowlist_externals =
    {[base]allowlist_externals}
commands =
    {[base]commands_test_check}
    pytest {posargs}


# Build documentation
[testenv:docs-{build, release, clean, command, spelling, live, open, make}]
description =
    build: build documentation.
    release: create documentation branch.
    clean: clean build.
    spelling: run spell checking on documentation and docstrings.
    command: run arbitrary command
    live: use sphinx-autobuild
    make: run arbitrary make command from docs/Makefile.  Passes in posargs
usedevelop = True
envdir     = {toxworkdir}/docs
basepython = {[base]build_python}
conda_env  = {[base]conda_env_docs}
changedir  = {toxinidir}/docs
commands =
    build: bash -c "echo $PWD"
    build: make {posargs:html}
    open: open {toxinidir}/docs/_build/html/index.html
    release: ghp-import -o -n {posargs:-m 'update docs'} -b nist-pages {toxinidir}/docs/_build/html
    clean: make allclean
    spelling: make spelling
    command: {posargs}
    live: make livehtml
    make: make {posargs}

# create pypi dist
[testenv:dist-pypi-{build, testrelease, release}]
description  =
    build: build distribution.
    testrelease: upload to testpypi
    release: upload to pypi
skip_install = True
envdir       = {toxworkdir}/dist-pypi
basepython   = {[base]build_python}
conda_env    = {[base]conda_env_dist_pypi}
changedir    = {toxinidir}
commands     =
    build: rm -rf {toxinidir}/dist
    build: python -m build --outdir "{toxinidir}/dist/"

    testrelease: twine upload --repository testpypi {toxinidir}/dist/*
    release: twine upload {toxinidir}/dist/*


# create conda dist
[testenv:dist-conda-{recipe, build, command}]
description  =
    recipe: build conda recipe using grayskull (can optionally pass a local sdist)
    build: build conda distribution
    command: run arbitrary command
skip_install = True
envdir       = {toxworkdir}/dist-conda
basepython   = {[base]build_python}
conda_env    = {[base]conda_env_dist_conda}
changedir    = {toxinidir}/dist-conda
commands     =
    recipe: rm -rf {toxinidir}/dist-conda/{[base]package_name}
    recipe: grayskull pypi {posargs:{[base]package_name}}
    recipe: cat {[base]package_name}/meta.yaml

    build: rm -rf build
    build: mkdir -p build
    build: conda mambabuild --output-folder=build --no-anaconda-upload .
    command: {posargs:python}


# test pypi/conda install from local/remote
[testenv:test-dist-{pypi, conda}-{local,remote}-py3{8,9,10}]
conda_channels =
    {[base]conda_channels}
description  =
    Test install from
    pypi: pypi
    conda: conda
    using either
    local: local
    remote: remote
    versions.
skip_install = True
conda_env    = {toxinidir}/environment/test-extras.yaml
conda_deps =
    conda-remote: {[base]package_name}
    conda-local: {posargs}
deps =
    pypi-remote: {[base]package_name}
    pypi-local: {posargs}


# Test pip installed dependencies
[testenv:test-pip-py3{8,9,10}]
description  =
    Test package against pip installed packages
usedevelop   = True
extras = test
conda_env    = {toxinidir}/environment/test-extras.yaml


[testenv:lint-{mypy,command}]
description =
    Run mypy on code. (run with tox -e lint -- --no-incremental to rebuild cache).
conda_env = {[base]conda_env_lint}
usedevelop = True
envdir     = {toxworkdir}/lint
basepython = {[base]build_python}
commands =
         mypy: mypy --color-output {posargs}
         command: {posargs}
