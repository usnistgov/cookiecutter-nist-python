[build-system]
build-backend = "hatchling.build"
requires = [
    "hatch-fancy-pypi-readme",
    "hatch-vcs",
    "hatchling",
]

[project]
name = "{{ cookiecutter.project_name }}"
description = "{{ cookiecutter.project_short_description }}"
keywords = [
    "{{ cookiecutter.project_name }}",
]
license = { text = "NIST-PD" }
license-files = { paths = [ "LICENSE" ] }
authors = [
    { name = "{{ cookiecutter.full_name.replace('\"', '\\\"') }}", email = "{{ cookiecutter.email }}" },
]
requires-python = ">=3.8,<3.14"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "License :: Public Domain",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
]
dynamic = [
    "readme",
    "version",
]
dependencies = [
    {%- if cookiecutter.command_line_interface == "click" %}
    "click",
    {%- elif cookiecutter.command_line_interface == "typer" %}
    "typer",
    {%- endif %}
]
urls.Documentation = "https://pages.nist.gov/{{ cookiecutter.project_name }}/"
urls.Homepage = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_name}}"
{%- if cookiecutter.command_line_interface != "none" %}
scripts.{{ cookiecutter.project_slug }} = "{{ cookiecutter.project_slug}}.cli:main"
{%- endif %}

[dependency-groups]
dev = [
    { include-group = "dev-extras" },
    { include-group = "mypy" },
    # { include-group = "nbval" },
    { include-group = "test" },
    { include-group = "typing" },
    { include-group = "uvxrun" },
]
test = [
    { include-group = "test-extras" },
]
docs = [
    {%- if cookiecutter.sphinx_use_autodocsumm %}
    "autodocsumm",
    {%- endif %}
    {%- if cookiecutter.sphinx_theme == "furo" %}
    "furo",
    {%- endif %}
    "myst-nb; python_version>'3.9'",
    # myst-parser, ipython,
    "pyenchant",
    "sphinx>=5.3.0",
    {%- if cookiecutter.command_line_interface == "argparse" %}
    "sphinx-argparse",
    {%- endif %}
    {%- if cookiecutter.sphinx_theme == "sphinx_book_theme" %}
    "sphinx-book-theme",
    {%- endif %}
    {%- if cookiecutter.command_line_interface in ["click", "typer"] %}
    "sphinx-click",
    {%- endif %}
    "sphinx-copybutton",
    "sphinxcontrib-spelling",
]
cog = [ "cogapp" ]
dev-extras = [
    "ipykernel",
    "ipython",
    "nbclient>=0.10.0",
    "nox>=2024.4.15",
    "pytest-accept",
]
docs-live = [
    "sphinx-autobuild",
    { include-group = "docs" },
]
mypy = [ "mypy>=1.14.0" ]
nbval = [ "nbval" ]
test-extras = [
    "pytest",
    "pytest-cov",
    "pytest-sugar",
    "pytest-xdist",
]
test-notebook = [
    { include-group = "nbval" },
    { include-group = "test-extras" },
]
typing = [
    "pylint",
    "pytest",
    { include-group = "uvxrun" },
]
# Anything needed to run tools/uvxrun.py
# NOTE: uvxrun-tools defined explicitly in tool.pyproject2conda.envs.uvxrun-tools
uvxrun = [ "packaging" ]

[tool.hatch.version]
source = "vcs"
raw-options = { local_scheme = "no-local-version" }

[tool.hatch.build]
exclude = [
    ".*_cache",
]

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"
fragments = [
    { path = "README.md" },
    { path = "CHANGELOG.md" },
    { path = "LICENSE" },
]

# * Linting --------------------------------------------------------------------

[tool.ruff]
line-length = 88
extend-include = [
    "*.ipynb",
]
extend-exclude = [
    ".numba_cache",
    ".venv",
    "dist-conda",
    # "tests/",
    # "src/{{ cookiecutter.project_slug }}/tests",
]
fix = true
unsafe-fixes = true

format.docstring-code-format = true

lint.select = [
    "ALL",
]
lint.ignore = [
    "ANN401",  # - Any ok sometimes
    "COM",     # - flake8-commas, formatter should take care of this?
    "CPY",     # - Don't require copyright
    "D105",    # - Missing magic method docstring
    "D107",    # - Missing docstring in __init__
    "D203",    # - 1 blank line required before class docstring
    "D205",    # - blank line after summary
    "D212",    # - Multi-line docstring summary should start at the first line
    "D400",    # - First line should end with a period
    "D401",    # - First line of docstring should be in imperative mood: "{first_line}"
    "D415",    # - First line should end with a period, question mark, or exclamation point
    "D417",    # - Missing argument description in the docstring for {definition}: {name} (bad with docfiller)
    "E402",    # - module level import not at top of file
    "E501",    # - line too long - let formatter fix this
    "E731",    # - do not assign a lambda expression, use a def
    "FBT",     # - bools are ok
    "ISC",     # - flake8-implicit-str-concat
    "PLC0415", # - import should be at top level (leads to issues with imports in func?)
    "TID252",  # - Allow relative imports
]
# Use extend-ignore for project specific ignores (avoid changing ignore directly)
lint.extend-ignore = [
    # "ERA", # - eradicate (want to keep some stuff)
    # * Annotations
    # "SLF001",  # - flake8-self (private access sometimes OK)
    # "ANN",     # - Annotations (just use mypy/pyright)
    # * pylint
    # "PLR2004", # - numbers in comparison sometimes ok
    # "PLR0913", # - complexity sometimes ok
    # "PLR0917", # - complexity sometimes ok
    # * Docstrings ymmv
    # "D102",    # - Missing docstring in public method
    # "D103",    # - Missing docstring in public function
    # "D202",    # - blank line after docstring
    "DOC201", # - Missing return from documentation
    "DOC202", # - Missing return from documentation
    "DOC501", # - Missing raises from documentation
    "NPY",    # - not using numpy?
    "PD",     # - not using pandas?
]
lint.per-file-ignores."**/*.ipynb" = [
    "B018",
    "D100",
    "INP001",
]
lint.per-file-ignores."docs/conf.py" = [
    "ERA",
    "INP001",
]
lint.per-file-ignores."noxfile.py" = [
    "RUF009",
]
lint.per-file-ignores."tests/*.py" = [
    "D",
    "S101",
]
lint.per-file-ignores."tools/*.py" = [
    "A",
    "D102",
    "DOC402",
    "S",
    "SLF001",
]
# lint.fixable = ["ALL"]
lint.unfixable = [
    "ERA",
    "PLR6104",
    "T",
]
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
lint.isort.known-first-party = [
    "{{ cookiecutter.project_slug }}",
]
lint.pydocstyle.convention = "numpy"
lint.pylint.max-args = 15
lint.pylint.max-positional-args = 15
lint.pylint.max-public-methods = 30
# Project specific ignores (avoid changing per-file-ignores directly)
# lint.extend-per-file-ignores."path/to/file.py" = [ ... ]

lint.preview = true

[tool.check-wheel-contents]
toplevel = [ "{{ cookiecutter.project_slug }}" ]
src_dir = [ "src" ]

# * Testing --------------------------------------------------------------------

[tool.pytest.ini_options]
addopts = [
    "--doctest-modules",
    "--doctest-glob=*.md",
    "--pyargs",
    "--cov-config=pyproject.toml",
]
testpaths = [
    "README.md",
    "{{ cookiecutter.project_slug }}",
    "tests",
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true
exclude_also = [
    "if TYPE_CHECKING:",
    "@overload",
]
omit = [
    "*/vendored/*",
    "*/_typing.py",
]
include = [
    "src/*",
]

[tool.coverage.paths]
source = [
    "src/",
    ".nox/**/site-packages/",
]

# * Typing ---------------------------------------------------------------------

[tool.mypy]
files = [
    "src",
    "tests",
]
show_error_codes = true
warn_unused_ignores = true
warn_return_any = true
warn_unused_configs = true
exclude = [
    ".eggs",
    ".tox",
    ".nox",
    ".venv",
    ".numba_cache",
    "docs",
]
check_untyped_defs = true
strict = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [  ]

[[tool.mypy.overrides]]
ignore_errors = true
module = [  ]

[tool.pyright]
include = [
    "src",
    "tests",
]
exclude = [
    "**/__pycache__",
    ".tox/**",
    ".nox/**",
    ".venv/**",
    "**/.mypy_cache",
    "**/.numba_cache",
]
strict = [
    "src",
    "tests",
    "noxfile.py",
    "tools/*.py",
]
pythonVersion = "3.11"
typeCheckingMode = "strict"
# typeCheckingMode = "basic"
# # enable subset of "strict"
# reportDuplicateImport = true
# reportInvalidStubStatement = true
# reportOverlappingOverload = true
# reportPropertyTypeMismatch = true
# reportUntypedClassDecorator = true
# reportUntypedFunctionDecorator = true
# reportUntypedNamedTuple = true
# reportUnusedImport = true
# # disable subset of "basic"
# reportGeneralTypeIssues = false
# reportMissingModuleSource = false
# reportOptionalCall = false
# reportOptionalIterable = false
# reportOptionalMemberAccess = false
# reportOptionalOperand = false
# reportOptionalSubscript = false
# reportPrivateImportUsage = false
# reportUnboundVariable = false

[tool.pytype]
inputs = [
    "src",
    "tests",
]

# * Dependency creation --------------------------------------------------------

[tool.pyproject2conda]
user_config = "config/userconfig.toml"
template_python = "requirements/py{py}-{env}"
template = "requirements/{env}"
python = "default"
channels = "conda-forge"
style = "yaml"
deps = "pip"

[tool.pyproject2conda.dependencies]
pytest-accept = { pip = true }

[tool.pyproject2conda.envs.dev]
groups = "dev"
style = [ "requirements", "yaml" ]

[tool.pyproject2conda.envs.test]
groups = "test"
python = "all"
style = [ "requirements", "yaml" ]

[tool.pyproject2conda.envs.test-extras]
groups = "test-extras"
python = "all"
skip_package = true
style = [ "requirements", "yaml" ]

[tool.pyproject2conda.envs.test-notebook]
groups = "test-notebook"
style = "requirements"

[tool.pyproject2conda.envs.docs]
groups = "docs"
style = "requirements"

[tool.pyproject2conda.envs.docs-live]
groups = "docs-live"
style = "requirements"

[tool.pyproject2conda.envs.typing]
groups = "typing"
python = "all"
style = "requirements"

[tool.pyproject2conda.envs.build]
groups = "build-system.requires"
skip_package = true
style = "requirements"

[tool.pyproject2conda.envs.uvxrun-tools]
reqs = [
    # these used solely for specking tools to be used with tools/uvxrun.py
    "conda-lock>=2.5.5",
    "grayskull>=2.5.3",
    "nbqa>=1.8.4",
    "pre-commit",
    "pyproject2conda>=0.16.0",
    "pyright>=1.1.391",
    "scriv",
    "twine>=5.0.0",
]
groups = "mypy"
skip_package = true
style = "requirements"

# * uv -------------------------------------------------------------------------

[tool.uv]
managed = true
default-groups = [ "dev" ]
fork-strategy = "requires-python"
required-version = ">=0.5.21"

[tool.uv.pip]
annotation-style = "line"

# * Other tools ----------------------------------------------------------------

[tool.scriv]
format = "md"
md_header_level = "2"
new_fragment_template = "file: changelog.d/templates/new_fragment.md.j2"

[tool.commitizen]
use_shortcuts = true

[tool.cruft]
