[build-system]
build-backend = "hatchling.build"
requires = [
    "hatch-fancy-pypi-readme",
    "hatch-vcs",
    "hatchling",
]

[project]
name = "{{ cookiecutter.project_name }}"
description = "{{ cookiecutter.project_short_description }}"
keywords = [
    "{{ cookiecutter.project_name }}",
]
license = "NIST-PD"
license-files = [ "LICENSE" ]
authors = [
    { name = "{{ cookiecutter.full_name.replace('\"', '\\\"') }}", email = "{{ cookiecutter.email }}" },
]
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
]
dynamic = [
    "readme",
    "version",
]
dependencies = [
    {%- if cookiecutter.command_line_interface == "click" %}
    "click",
    {%- elif cookiecutter.command_line_interface == "typer" %}
    "typer",
    {%- endif %}
]
urls.Documentation = "https://pages.nist.gov/{{ cookiecutter.project_name }}/"
urls.Homepage = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_name}}"
{%- if cookiecutter.command_line_interface != "none" %}
scripts.{{ cookiecutter.project_slug }} = "{{ cookiecutter.project_slug}}.cli:main"
{%- endif %}

[dependency-groups]
dev = [
    { include-group = "dev-extras" },
    { include-group = "mypy" },
    { include-group = "notebook" },
    { include-group = "test" },
    { include-group = "typecheck" },
]
test = [
    { include-group = "test-extras" },
]
docs = [
    {%- if cookiecutter.sphinx_use_autodocsumm %}
    "autodocsumm",
    {%- endif %}
    {%- if cookiecutter.sphinx_theme == "furo" %}
    "furo",
    {%- endif %}
    "myst-nb; python_version>'3.9'",
    # myst-parser, ipython,
    "pyenchant",
    "sphinx>=5.3.0",
    {%- if cookiecutter.command_line_interface == "argparse" %}
    "sphinx-argparse",
    {%- endif %}
    {%- if cookiecutter.sphinx_theme == "sphinx_book_theme" %}
    "sphinx-book-theme",
    {%- endif %}
    {%- if cookiecutter.command_line_interface in ["click", "typer"] %}
    "sphinx-click",
    {%- endif %}
    "sphinx-copybutton",
    "sphinxcontrib-spelling",
]
cog = [ "cogapp" ]
dev-extras = [
    "pytest-accept",
    { include-group = "nox" },
]
docs-live = [
    "sphinx-autobuild",
    { include-group = "docs" },
]
mypy = [
    "mypy>=1.15.0",
    "orjson",
]
nbclient = [ "nbclient" ]
nbval = [ "nbval" ]
nox = [ "nox>=2025.5.1" ]
notebook = [
    "ipykernel",
    { include-group = "nbclient" },
    { include-group = "nbval" },
]
test-extras = [
    "pytest",
    "pytest-cov",
    "pytest-sugar",
    "pytest-xdist",
]
test-notebook = [
    { include-group = "nbval" },
    { include-group = "test-extras" },
]
typecheck = [
    "pylint",
    "pytest",
]

[tool.hatch.version]
source = "vcs"
raw-options = { local_scheme = "no-local-version" }

[tool.hatch.build]
exclude = [
    ".*_cache",
]

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"
fragments = [
    { path = "README.md" },
    { path = "CHANGELOG.md" },
    { path = "LICENSE" },
]

[tool.repo-review]
ignore = [
    "GH",    # enable for actions
    "PC140", # do this externally
    "PC170", # pygrep
    "PC901", # ci message
    "RTD",
]

[tool.check-wheel-contents]
toplevel = [ "{{ cookiecutter.project_slug }}" ]
src_dir = [ "src" ]

[tool.pyproject-fmt]
# max_supported_python = "3.13"

# * Testing --------------------------------------------------------------------

[tool.pytest.ini_options]
addopts = [
    "-ra",
    "--strict-config",
    "--strict-markers",
    "--doctest-modules",
    "--doctest-glob=*.md",
    "--pyargs",
    "--cov-config=pyproject.toml",
]
testpaths = [
    "README.md",
    "{{ cookiecutter.project_slug }}",
    "tests",
]
minversion = "8"
log_cli_level = "INFO"
xfail_strict = true
filterwarnings = [ "error" ]

[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true
exclude_also = [
    "if TYPE_CHECKING:",
    "@overload",
]
omit = [
    "*/vendored/*",
    "*/_typing.py",
]
include = [
    "src/*",
]

[tool.coverage.paths]
source = [
    "src/",
    ".nox/**/site-packages/",
]

# * typecheck ---------------------------------------------------------------------

[tool.mypy]
files = [
    "src",
    "tests",
]
warn_unused_ignores = true
warn_return_any = true
warn_unused_configs = true
warn_unreachable = true
exclude = [
    ".eggs",
    ".tox",
    ".nox",
    ".venv",
    ".numba_cache",
    "docs",
]
check_untyped_defs = true
strict = true
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
]

# [[tool.mypy.overrides]]
# ignore_missing_imports = true
# module = [  ]

# [[tool.mypy.overrides]]
# ignore_errors = true
# module = [  ]

[tool.pyright]
include = [
    "src",
    "tests",
]
exclude = [
    "**/__pycache__",
    ".tox/**",
    ".nox/**",
    ".venv/**",
    "**/.mypy_cache",
    "**/.numba_cache",
]
strict = [
    "src",
    "tests",
    "noxfile.py",
    "tools/*.py",
]
pythonVersion = "3.11"
typeCheckingMode = "strict"
# typeCheckingMode = "basic"
# # enable subset of "strict"
# reportDuplicateImport = true
# reportInvalidStubStatement = true
# reportOverlappingOverload = true
# reportPropertyTypeMismatch = true
# reportUntypedClassDecorator = true
# reportUntypedFunctionDecorator = true
# reportUntypedNamedTuple = true
# reportUnusedImport = true
# # disable subset of "basic"
# reportGeneralTypeIssues = false
# reportMissingModuleSource = false
# reportOptionalCall = false
# reportOptionalIterable = false
# reportOptionalMemberAccess = false
# reportOptionalOperand = false
# reportOptionalSubscript = false
# reportPrivateImportUsage = false
# reportUnboundVariable = false

[tool.pytype]
inputs = [
    "src",
    "tests",
]

# * Dependency creation --------------------------------------------------------

[tool.pyproject2conda]
user-config = "config/userconfig.toml"
template-python = "requirements/py{py}-{env}"
template = "requirements/{env}"
name = "py{py}-{env}"
python = "default"
channels = "conda-forge"
style = "yaml"
deps = "pip"

[tool.pyproject2conda.dependencies]
pytest-accept = { pip = true }

[tool.pyproject2conda.envs.dev]
groups = "dev"
style = [ "requirements", "yaml" ]

[tool.pyproject2conda.envs.test]
groups = "test"
python = "all"
style = [ "requirements", "yaml" ]

[tool.pyproject2conda.envs.test-extras]
groups = "test-extras"
python = "all"
skip-package = true
style = [ "requirements", "yaml" ]

[tool.pyproject2conda.envs.test-notebook]
groups = "test-notebook"
style = "requirements"

[tool.pyproject2conda.envs.docs]
groups = "docs"
style = "requirements"

[tool.pyproject2conda.envs.docs-live]
groups = "docs-live"
style = "requirements"

[tool.pyproject2conda.envs.typecheck]
groups = "typecheck"
python = "all"
style = "requirements"

[tool.pyproject2conda.envs.build]
groups = "build-system.requires"
skip-package = true
style = "requirements"

[tool.pyproject2conda.envs.uvx-tools]
reqs = [
    # these used solely for specking tools to be run via uvx ...
    "conda-lock>=2.5.5",
    "cruft",
    "grayskull>=2.5.3",
    "nbqa>=1.8.4",
    "pre-commit",
    "pre-commit-uv",
    "pyrefly",
    "pyright>=1.1.396",
    "scriv",
    "twine>=5.0.0",
    "ty",
]
groups = [
    "cog",
    "mypy",
    "nox",
]
skip-package = true
style = "requirements"

# * uv -------------------------------------------------------------------------

[tool.uv]
managed = true
default-groups = [ "dev" ]
fork-strategy = "requires-python"
required-version = ">=0.7.2"

[tool.uv.pip]
annotation-style = "line"

# * Other tools ----------------------------------------------------------------

[tool.scriv]
format = "md"
md_header_level = "2"
new_fragment_template = "file: changelog.d/templates/new_fragment.md.j2"

[tool.commitizen]
use_shortcuts = true

[tool.cruft]
